##################################################
# JIST (Java In Simulation Time) Project
# Timestamp: <memory.jpy Tue 2004/04/06 11:58:40 barr pompom.cs.cornell.edu>
#

# Copyright (C) 2004 by Cornell University
# All rights reserved.
# Refer to LICENSE for terms and conditions of use.

# constants
FIELD_X = 200
FIELD_Y = 200

import sys
import jist.swans.Constants as Constants
import jist.swans.misc.Util as Util
import jist.swans.misc.Mapper as Mapper
import jist.swans.field.Field as Field
import jist.swans.field.Placement as Placement
import jist.swans.radio.RadioNoiseIndep as RadioNoiseIndep
import jist.swans.radio.RadioInfo as RadioInfo
import jist.swans.mac.MacAddress as MacAddress
import jist.swans.mac.Mac802_11 as Mac802_11 
import jist.swans.net.NetAddress as NetAddress
import jist.swans.net.NetIp as NetIp
import jist.swans.net.PacketLoss as PacketLoss
import jist.swans.trans.TransUdp as TransUdp
import jist.swans.trans.TransTcp as TransTcp
import jist.swans.app.AppJava as AppJava

def createNode(i, field, placement, radioInfoShared, protMap, plIn, plOut):
  # create entities
  radio = RadioNoiseIndep(i, radioInfoShared)
  mac = Mac802_11(MacAddress(i), radio.getRadioInfo())
  net = NetIp(NetAddress(i), protMap, plIn, plOut)
  udp = TransUdp()
  tcp = TransTcp()
  app = AppJava("jist.swans.app.udptest")
  app.setUdpEntity(udp.getProxy())

  # hookup entities
  field.addRadio(radio.getRadioInfo(), radio.getProxy(), placement.getNextLocation())
  radio.setFieldEntity(field.getProxy())
  radio.setMacEntity(mac.getProxy())
  intId = net.addInterface(mac.getProxy())
  net.setProtocolHandler(Constants.NET_PROTOCOL_UDP, udp.getProxy())
  mac.setRadioEntity(radio.getProxy())
  mac.setNetEntity(net.getProxy(), intId)
  udp.setNetEntity(net.getProxy())
  tcp.setNetEntity(net.getProxy())


def createSim(nodes):
  bounds = Location.Location2D(FIELD_X, FIELD_Y)
  placement = Placement.Random(bounds)
  field = Field(bounds)
  radioInfoShared = RadioInfo.createShared(
        Constants.FREQUENCY_DEFAULT, 
        Constants.BANDWIDTH_DEFAULT,
        Constants.TRANSMIT_DEFAULT, 
        Constants.GAIN_DEFAULT,
        Util.fromDB(Constants.SENSITIVITY_DEFAULT), 
        Util.fromDB(Constants.THRESHOLD_DEFAULT),
        Constants.TEMPERATURE_DEFAULT, 
        Constants.TEMPERATURE_FACTOR_DEFAULT, 
        Constants.AMBIENT_NOISE_DEFAULT)
  protMap = Mapper(Constants.NET_PROTOCOL_MAX)
  protMap.mapToNext(Constants.NET_PROTOCOL_UDP)
  pl = PacketLoss.Zero()
  for i in range(nodes):
    if not i%1000: sys.stdout.write('.')
    createNode(i, field, placement, radioInfoShared, protMap, pl, pl)
  sys.stdout.write('\n')
  sys.stdout.flush()
  Util.printMemoryStats()

if __name__=='main':
  args = sys.argv[1:]
  if not len(args):
    print 'syntax: memory.jpy <nodes>'
    sys.exit(1)
  nodes = int(args[0])
  print 'Creating %s nodes' % nodes
  createSim(nodes)

